<?php

class RootObject
{
	/** @var SimpleNesting[] */
	public $simpleNesting;

	public static function fromJson(\stdClass $data): self
	{
		$instance = new self();
		$instance->simpleNesting = array_map(static function($data) {
			return SimpleNesting::fromJson($data);
		}, $data->simple_nesting);
		return $instance;
	}

	public function toArray(): array
	{
		return [
			'simple_nesting' => array_map(static function($item) {
				    return $item->toArray();
			}, $this->simpleNesting)
		];
	}
}

<?php

class SimpleNesting
{
	/** @var float */
	public $alwaysPresent;
	/** @var string|null */
	public $string;
	/** @var Object|null */
	public $object;
	/** @var int|null */
	public $number;

	public static function fromJson(\stdClass $data): self
	{
		$instance = new self();
		$instance->alwaysPresent = $data->always_present;
		$instance->string = $data->string ?? null;
		$instance->object = ($data->object ?? null) !== null ? Object::fromJson($data->object) : null;
		$instance->number = $data->number ?? null;
		return $instance;
	}

	public function toArray(): array
	{
		return [
			'always_present' => $this->alwaysPresent,
			'string' => $this->string,
			'object' => $this->object !== null ? $this->object->toArray() : null,
			'number' => $this->number
		];
	}
}

<?php

class Object
{
	/** @var int|null */
	public $test;
	/** @var int|null */
	public $anotherTest;

	public static function fromJson(\stdClass $data): self
	{
		$instance = new self();
		$instance->test = $data->test ?? null;
		$instance->anotherTest = $data->another_test ?? null;
		return $instance;
	}

	public function toArray(): array
	{
		return [
			'test' => $this->test,
			'another_test' => $this->anotherTest
		];
	}
}
