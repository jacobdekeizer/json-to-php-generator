<?php

class RootObject
{
	/** @var SimpleNesting[] */
	public $simpleNesting;

	/**
	 * @param SimpleNesting[] $simpleNesting
	 */
	public function setSimpleNesting(array $simpleNesting): void
	{
		$this->simpleNesting = $simpleNesting;
	}

	public static function fromJson(\stdClass $data): self
	{
		$instance = new self();
		$instance->setSimpleNesting(array_map(static function($data) {
			return SimpleNesting::fromJson($data);
		}, $data->simple_nesting));
		return $instance;
	}
}

<?php

class SimpleNesting
{
	/** @var float */
	public $alwaysPresent;
	/** @var string|null */
	public $string;
	/** @var Object|null */
	public $object;
	/** @var int|null */
	public $number;

	/**
	 * @param float $alwaysPresent
	 */
	public function setAlwaysPresent(float $alwaysPresent): void
	{
		$this->alwaysPresent = $alwaysPresent;
	}

	/**
	 * @param string|null $string
	 */
	public function setString(?string $string): void
	{
		$this->string = $string;
	}

	/**
	 * @param Object|null $object
	 */
	public function setObject(?Object $object): void
	{
		$this->object = $object;
	}

	/**
	 * @param int|null $number
	 */
	public function setNumber(?int $number): void
	{
		$this->number = $number;
	}

	public static function fromJson(\stdClass $data): self
	{
		$instance = new self();
		$instance->setAlwaysPresent($data->always_present);
		$instance->setString($data->string ?? null);
		$instance->setObject(($data->object ?? null) !== null ? Object::fromJson($data->object) : null);
		$instance->setNumber($data->number ?? null);
		return $instance;
	}
}

<?php

class Object
{
	/** @var int|null */
	public $test;
	/** @var int|null */
	public $anotherTest;

	/**
	 * @param int|null $test
	 */
	public function setTest(?int $test): void
	{
		$this->test = $test;
	}

	/**
	 * @param int|null $anotherTest
	 */
	public function setAnotherTest(?int $anotherTest): void
	{
		$this->anotherTest = $anotherTest;
	}

	public static function fromJson(\stdClass $data): self
	{
		$instance = new self();
		$instance->setTest($data->test ?? null);
		$instance->setAnotherTest($data->another_test ?? null);
		return $instance;
	}
}
