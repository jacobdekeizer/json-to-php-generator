class RootObject
{
	/** @var string[] */
	public $stringArray;
	/** @var (string|int|null)[] */
	public $mixedArray;
	public $nullArray;
	public $unknownArray;
	public $boolean;
	public $float;
	public $int;
	public $null;
	public $nestedClass;
	public $string;

	/**
	 * @param string[] $stringArray
	 * @param (string|int|null)[] $mixedArray
	 */
	public function __construct(
		array $stringArray,
		array $mixedArray,
		array $nullArray,
		array $unknownArray,
		bool $boolean,
		float $float,
		int $int,
		$null,
		NestedClass $nestedClass,
		string $string
	) {
		$this->stringArray = $stringArray;
		$this->mixedArray = $mixedArray;
		$this->nullArray = $nullArray;
		$this->unknownArray = $unknownArray;
		$this->boolean = $boolean;
		$this->float = $float;
		$this->int = $int;
		$this->null = $null;
		$this->nestedClass = $nestedClass;
		$this->string = $string;
	}

	public static function fromJson(\stdClass $data): self
	{
		return new self(
			$data->string_array,
			$data->mixed_array,
			$data->null_array,
			$data->unknown_array,
			$data->boolean,
			$data->float,
			$data->int,
			$data->null ?? null,
			NestedClass::fromJson($data->nested_class),
			$data->string
		);
	}
}

class NestedClass
{
	public $var;

	public function __construct(int $var)
	{
		$this->var = $var;
	}

	public static function fromJson(\stdClass $data): self
	{
		return new self(
			$data->var
		);
	}
}
